package com.password.kg.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.password.kg.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "Email", false, "EMAIL");
        public final static Property FIO = new Property(2, String.class, "FIO", false, "FIO");
        public final static Property Token = new Property(3, String.class, "Token", false, "TOKEN");
        public final static Property Avatar = new Property(4, String.class, "Avatar", false, "AVATAR");
        public final static Property IsAuthenticated = new Property(5, Boolean.class, "isAuthenticated", false, "IS_AUTHENTICATED");
        public final static Property PinCode = new Property(6, String.class, "PinCode", false, "PIN_CODE");
        public final static Property LanguageId = new Property(7, Integer.class, "LanguageId", false, "LANGUAGE_ID");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMAIL\" TEXT NOT NULL ," + // 1: Email
                "\"FIO\" TEXT," + // 2: FIO
                "\"TOKEN\" TEXT," + // 3: Token
                "\"AVATAR\" TEXT," + // 4: Avatar
                "\"IS_AUTHENTICATED\" INTEGER," + // 5: isAuthenticated
                "\"PIN_CODE\" TEXT," + // 6: PinCode
                "\"LANGUAGE_ID\" INTEGER);"); // 7: LanguageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEmail());
 
        String FIO = entity.getFIO();
        if (FIO != null) {
            stmt.bindString(3, FIO);
        }
 
        String Token = entity.getToken();
        if (Token != null) {
            stmt.bindString(4, Token);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(5, Avatar);
        }
 
        Boolean isAuthenticated = entity.getIsAuthenticated();
        if (isAuthenticated != null) {
            stmt.bindLong(6, isAuthenticated ? 1L: 0L);
        }
 
        String PinCode = entity.getPinCode();
        if (PinCode != null) {
            stmt.bindString(7, PinCode);
        }
 
        Integer LanguageId = entity.getLanguageId();
        if (LanguageId != null) {
            stmt.bindLong(8, LanguageId);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FIO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Token
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Avatar
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isAuthenticated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PinCode
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // LanguageId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.getString(offset + 1));
        entity.setFIO(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsAuthenticated(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setPinCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguageId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
