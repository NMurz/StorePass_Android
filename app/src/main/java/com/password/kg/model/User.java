package com.password.kg.model;

import java.util.List;
import com.password.kg.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    /** Not-null value. */
    private String Email;
    private String FIO;
    private String Token;
    private String Avatar;
    private Boolean isAuthenticated;
    private String PinCode;
    private Integer LanguageId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Categories> Categories;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String Email, String FIO, String Token, String Avatar, Boolean isAuthenticated, String PinCode, Integer LanguageId) {
        this.id = id;
        this.Email = Email;
        this.FIO = FIO;
        this.Token = Token;
        this.Avatar = Avatar;
        this.isAuthenticated = isAuthenticated;
        this.PinCode = PinCode;
        this.LanguageId = LanguageId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getEmail() {
        return Email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String Email) {
        this.Email = Email;
    }

    public String getFIO() {
        return FIO;
    }

    public void setFIO(String FIO) {
        this.FIO = FIO;
    }

    public String getToken() {
        return Token;
    }

    public void setToken(String Token) {
        this.Token = Token;
    }

    public String getAvatar() {
        return Avatar;
    }

    public void setAvatar(String Avatar) {
        this.Avatar = Avatar;
    }

    public Boolean getIsAuthenticated() {
        return isAuthenticated;
    }

    public void setIsAuthenticated(Boolean isAuthenticated) {
        this.isAuthenticated = isAuthenticated;
    }

    public String getPinCode() {
        return PinCode;
    }

    public void setPinCode(String PinCode) {
        this.PinCode = PinCode;
    }

    public Integer getLanguageId() {
        return LanguageId;
    }

    public void setLanguageId(Integer LanguageId) {
        this.LanguageId = LanguageId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Categories> getCategories() {
        if (Categories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoriesDao targetDao = daoSession.getCategoriesDao();
            List<Categories> CategoriesNew = targetDao._queryUser_Categories(id);
            synchronized (this) {
                if(Categories == null) {
                    Categories = CategoriesNew;
                }
            }
        }
        return Categories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCategories() {
        Categories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
